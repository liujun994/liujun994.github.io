{"meta":{"title":"Jun Liu Blog","subtitle":"","description":"","author":"Jun Liu","url":"https://liujun994.github.io","root":"/"},"pages":[{"title":"Research","date":"2022-06-25T08:32:53.000Z","updated":"2022-06-27T07:09:38.571Z","comments":true,"path":"Research/index.html","permalink":"https://liujun994.github.io/Research/index.html","excerpt":"","text":""},{"title":"404","date":"2022-06-26T05:58:00.000Z","updated":"2022-06-26T05:58:38.328Z","comments":true,"path":"404/index.html","permalink":"https://liujun994.github.io/404/index.html","excerpt":"","text":""},{"title":"Resume","date":"2022-06-25T08:17:24.000Z","updated":"2022-06-28T07:58:41.783Z","comments":true,"path":"Resume/index.html","permalink":"https://liujun994.github.io/Resume/index.html","excerpt":"","text":""},{"title":"Python-Multithreading","date":"2022-06-27T14:49:27.000Z","updated":"2022-06-27T15:17:29.909Z","comments":true,"path":"Resume/Python-Multithreading.html","permalink":"https://liujun994.github.io/Resume/Python-Multithreading.html","excerpt":"","text":"Python3 多线程多线程类似于同时执行多个不同程序，多线程运行有如下优点：使用线程可以把占据长时间的程序中的任务放到后台去处理。用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。程序的运行速度可能加快。在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。线程可以被抢占（中断）。在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。 线程可以分为: 内核线程：由操作系统内核创建和撤销。用户线程：不需要内核支持而在用户程序中实现的线程。Python3 线程中常用的两个模块为： _threadthreading(推荐使用)thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用”thread” 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。 开始学习Python线程Python中使用线程有两种方式：函数或者用类来包装线程对象。 函数式：调用 _thread 模块中的start_new_thread()函数来产生新线程。语法如下: _thread.start_new_thread ( function, args[, kwargs] )参数说明: function - 线程函数。args - 传递给线程函数的参数,他必须是个tuple类型。kwargs - 可选参数。实例 123#!/usr/bin/python3import _threadimport time 为线程定义一个函数123456def print_time( threadName, delay): count = 0 while count &lt; 5: time.sleep(delay) count += 1 print (\"%s: %s\" % ( threadName, time.ctime(time.time()) )) 创建两个线程1234567891011121314151617181920try: _thread.start_new_thread( print_time, (\"Thread-1\", 2, ) ) _thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )except: print (\"Error: 无法启动线程\")while 1: pass执行以上程序输出结果如下：Thread-1: Wed Jan 5 17:38:08 2022Thread-2: Wed Jan 5 17:38:10 2022Thread-1: Wed Jan 5 17:38:10 2022Thread-1: Wed Jan 5 17:38:12 2022Thread-2: Wed Jan 5 17:38:14 2022Thread-1: Wed Jan 5 17:38:14 2022Thread-1: Wed Jan 5 17:38:16 2022Thread-2: Wed Jan 5 17:38:18 2022Thread-2: Wed Jan 5 17:38:22 2022Thread-2: Wed Jan 5 17:38:26 2022 执行以上程后可以按下 ctrl-c 退出。 线程模块Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。 _thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。 threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法： threading.currentThread(): 返回当前的线程变量。threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法: run(): 用以表示线程活动的方法。start():启动线程活动。join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。isAlive(): 返回线程是否活动的。getName(): 返回线程名。setName(): 设置线程名。使用 threading 模块创建线程我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法： 实例 12345678910111213141516171819202122232425#!/usr/bin/python3import threadingimport timeexitFlag = 0class myThread (threading.Thread): def __init__(self, threadID, name, delay): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.delay = delay def run(self): print (\"开始线程：\" + self.name) print_time(self.name, self.delay, 5) print (\"退出线程：\" + self.name)def print_time(threadName, delay, counter): while counter: if exitFlag: threadName.exit() time.sleep(delay) print (\"%s: %s\" % (threadName, time.ctime(time.time()))) counter -= 1 创建新线程12thread1 = myThread(1, \"Thread-1\", 1)thread2 = myThread(2, \"Thread-2\", 2) 开启新线程123456789101112131415161718192021222324thread1.start()thread2.start()thread1.join()thread2.join()print (\"退出主线程\")以上程序执行结果如下；开始线程：Thread-1开始线程：Thread-2Thread-1: Wed Jan 5 17:34:54 2022Thread-2: Wed Jan 5 17:34:55 2022Thread-1: Wed Jan 5 17:34:55 2022Thread-1: Wed Jan 5 17:34:56 2022Thread-2: Wed Jan 5 17:34:57 2022Thread-1: Wed Jan 5 17:34:57 2022Thread-1: Wed Jan 5 17:34:58 2022退出线程：Thread-1Thread-2: Wed Jan 5 17:34:59 2022Thread-2: Wed Jan 5 17:35:01 2022Thread-2: Wed Jan 5 17:35:03 2022退出线程：Thread-2退出主线程线程同步如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。 使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下： 多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。 考虑这样一种情况：一个列表里所有元素都是0，线程”set”从后向前把所有元素改成1，而线程”print”负责从前往后读取列表并打印。 那么，可能线程”set”开始改的时候，线程”print”便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。 锁有两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。 经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。 实例 123456789101112131415161718192021222324252627#!/usr/bin/python3import threadingimport timeclass myThread (threading.Thread): def __init__(self, threadID, name, delay): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.delay = delay def run(self): print (\"开启线程： \" + self.name) # 获取锁，用于线程同步 threadLock.acquire() print_time(self.name, self.delay, 3) # 释放锁，开启下一个线程 threadLock.release()def print_time(threadName, delay, counter): while counter: time.sleep(delay) print (\"%s: %s\" % (threadName, time.ctime(time.time()))) counter -= 1threadLock = threading.Lock()threads = [] 创建新线程12thread1 = myThread(1, \"Thread-1\", 1)thread2 = myThread(2, \"Thread-2\", 2) 开启新线程12thread1.start()thread2.start() 添加线程到线程列表12threads.append(thread1)threads.append(thread2) 等待所有线程完成12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576for t in threads: t.join()print (\"退出主线程\")执行以上程序，输出结果为：开启线程： Thread-1开启线程： Thread-2Thread-1: Wed Jan 5 17:36:50 2022Thread-1: Wed Jan 5 17:36:51 2022Thread-1: Wed Jan 5 17:36:52 2022Thread-2: Wed Jan 5 17:36:54 2022Thread-2: Wed Jan 5 17:36:56 2022Thread-2: Wed Jan 5 17:36:58 2022退出主线程线程优先级队列（ Queue）Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。Queue 模块中的常用方法:Queue.qsize() 返回队列的大小Queue.empty() 如果队列为空，返回True,反之FalseQueue.full() 如果队列满了，返回True,反之FalseQueue.full 与 maxsize 大小对应Queue.get([block[, timeout]])获取队列，timeout等待时间Queue.get_nowait() 相当Queue.get(False)Queue.put(item) 写入队列，timeout等待时间Queue.put_nowait(item) 相当Queue.put(item, False)Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号Queue.join() 实际上意味着等到队列为空，再执行别的操作实例#!/usr/bin/python3import queueimport threadingimport timeexitFlag = 0class myThread (threading.Thread): def __init__(self, threadID, name, q): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.q = q def run(self): print (\"开启线程：\" + self.name) process_data(self.name, self.q) print (\"退出线程：\" + self.name)def process_data(threadName, q): while not exitFlag: queueLock.acquire() if not workQueue.empty(): data = q.get() queueLock.release() print (\"%s processing %s\" % (threadName, data)) else: queueLock.release() time.sleep(1)threadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]nameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]queueLock = threading.Lock()workQueue = queue.Queue(10)threads = []threadID = 1# 创建新线程for tName in threadList: thread = myThread(threadID, tName, workQueue) thread.start() threads.append(thread) threadID += 1 填充队列1234queueLock.acquire()for word in nameList: workQueue.put(word)queueLock.release() 等待队列清空12while not workQueue.empty(): pass 通知线程是时候退出1exitFlag = 1 等待所有线程完成1234567891011121314151617for t in threads: t.join()print (\"退出主线程\")以上程序执行结果：开启线程：Thread-1开启线程：Thread-2开启线程：Thread-3Thread-3 processing OneThread-1 processing TwoThread-2 processing ThreeThread-3 processing FourThread-1 processing Five退出线程：Thread-3退出线程：Thread-2退出线程：Thread-1退出主线程","author":"Jun Liu"},{"title":"about","date":"2022-06-26T05:50:40.000Z","updated":"2022-06-26T05:51:40.687Z","comments":true,"path":"about/index.html","permalink":"https://liujun994.github.io/about/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2020-02-10T14:07:08.000Z","updated":"2022-06-25T13:01:36.002Z","comments":false,"path":"categories/index.html","permalink":"https://liujun994.github.io/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2022-06-25T08:32:01.000Z","updated":"2022-06-25T08:32:01.828Z","comments":true,"path":"archives/index.html","permalink":"https://liujun994.github.io/archives/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-06-26T05:53:03.000Z","updated":"2022-06-26T05:54:16.572Z","comments":true,"path":"contact/index.html","permalink":"https://liujun994.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-06-25T08:14:10.000Z","updated":"2022-06-26T05:55:15.026Z","comments":true,"path":"friends/index.html","permalink":"https://liujun994.github.io/friends/index.html","excerpt":"","text":""},{"title":"个人相册","date":"2022-06-27T06:46:47.000Z","updated":"2022-06-27T06:47:33.633Z","comments":true,"path":"galleries/index.html","permalink":"https://liujun994.github.io/galleries/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-06-25T08:16:18.000Z","updated":"2022-06-26T12:08:16.521Z","comments":true,"path":"message/index.html","permalink":"https://liujun994.github.io/message/index.html","excerpt":"","text":""},{"title":"interests_and_skills","date":"2022-06-27T00:32:50.000Z","updated":"2022-06-27T14:27:02.534Z","comments":true,"path":"interests_and_skills/index.html","permalink":"https://liujun994.github.io/interests_and_skills/index.html","excerpt":"","text":"熟悉电脑的软硬件维护，网络维护，熟悉Windows DOS命令，远程协助，数据恢复，双系统安装，较熟悉Windows、Linux的操作命令……","author":"Jun Liu"},{"title":"masterpiece","date":"2022-06-27T00:33:38.000Z","updated":"2022-06-27T05:45:52.915Z","comments":true,"path":"masterpiece/index.html","permalink":"https://liujun994.github.io/masterpiece/index.html","excerpt":"","text":"","author":"Jun Liu"},{"title":"tags","date":"2022-06-25T06:17:36.000Z","updated":"2022-06-25T13:24:42.092Z","comments":true,"path":"tags/index.html","permalink":"https://liujun994.github.io/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2022-06-27T06:51:37.000Z","updated":"2022-06-27T06:51:37.821Z","comments":true,"path":"video/index.html","permalink":"https://liujun994.github.io/video/index.html","excerpt":"","text":""},{"title":"个人相册","date":"2022-06-27T06:46:47.000Z","updated":"2022-06-27T06:47:33.633Z","comments":true,"path":"asset/galleries/index.html","permalink":"https://liujun994.github.io/asset/galleries/index.html","excerpt":"","text":""}],"posts":[{"title":"Python-Multithreading","slug":"Python-Multithreading","date":"2022-06-27T14:49:27.000Z","updated":"2022-06-27T15:17:29.909Z","comments":true,"path":"2022/06/27/python-multithreading/","link":"","permalink":"https://liujun994.github.io/2022/06/27/python-multithreading/","excerpt":"","text":"Python3 多线程多线程类似于同时执行多个不同程序，多线程运行有如下优点：使用线程可以把占据长时间的程序中的任务放到后台去处理。用户界面可以更加吸引人，比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。程序的运行速度可能加快。在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。每个线程都有他自己的一组CPU寄存器，称为线程的上下文，该上下文反映了线程上次运行该线程的CPU寄存器的状态。指令指针和堆栈指针寄存器是线程上下文中两个最重要的寄存器，线程总是在进程得到上下文中运行的，这些地址都用于标志拥有线程的进程地址空间中的内存。线程可以被抢占（中断）。在其他线程正在运行时，线程可以暂时搁置（也称为睡眠） – 这就是线程的退让。 线程可以分为: 内核线程：由操作系统内核创建和撤销。用户线程：不需要内核支持而在用户程序中实现的线程。Python3 线程中常用的两个模块为： _threadthreading(推荐使用)thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用”thread” 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。 开始学习Python线程Python中使用线程有两种方式：函数或者用类来包装线程对象。 函数式：调用 _thread 模块中的start_new_thread()函数来产生新线程。语法如下: _thread.start_new_thread ( function, args[, kwargs] )参数说明: function - 线程函数。args - 传递给线程函数的参数,他必须是个tuple类型。kwargs - 可选参数。实例 123#!/usr/bin/python3import _threadimport time 为线程定义一个函数123456def print_time( threadName, delay): count = 0 while count &lt; 5: time.sleep(delay) count += 1 print (\"%s: %s\" % ( threadName, time.ctime(time.time()) )) 创建两个线程1234567891011121314151617181920try: _thread.start_new_thread( print_time, (\"Thread-1\", 2, ) ) _thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )except: print (\"Error: 无法启动线程\")while 1: pass执行以上程序输出结果如下：Thread-1: Wed Jan 5 17:38:08 2022Thread-2: Wed Jan 5 17:38:10 2022Thread-1: Wed Jan 5 17:38:10 2022Thread-1: Wed Jan 5 17:38:12 2022Thread-2: Wed Jan 5 17:38:14 2022Thread-1: Wed Jan 5 17:38:14 2022Thread-1: Wed Jan 5 17:38:16 2022Thread-2: Wed Jan 5 17:38:18 2022Thread-2: Wed Jan 5 17:38:22 2022Thread-2: Wed Jan 5 17:38:26 2022 执行以上程后可以按下 ctrl-c 退出。 线程模块Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。 _thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。 threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法： threading.currentThread(): 返回当前的线程变量。threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法: run(): 用以表示线程活动的方法。start():启动线程活动。join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。isAlive(): 返回线程是否活动的。getName(): 返回线程名。setName(): 设置线程名。使用 threading 模块创建线程我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法： 实例 12345678910111213141516171819202122232425#!/usr/bin/python3import threadingimport timeexitFlag = 0class myThread (threading.Thread): def __init__(self, threadID, name, delay): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.delay = delay def run(self): print (\"开始线程：\" + self.name) print_time(self.name, self.delay, 5) print (\"退出线程：\" + self.name)def print_time(threadName, delay, counter): while counter: if exitFlag: threadName.exit() time.sleep(delay) print (\"%s: %s\" % (threadName, time.ctime(time.time()))) counter -= 1 创建新线程12thread1 = myThread(1, \"Thread-1\", 1)thread2 = myThread(2, \"Thread-2\", 2) 开启新线程123456789101112131415161718192021222324thread1.start()thread2.start()thread1.join()thread2.join()print (\"退出主线程\")以上程序执行结果如下；开始线程：Thread-1开始线程：Thread-2Thread-1: Wed Jan 5 17:34:54 2022Thread-2: Wed Jan 5 17:34:55 2022Thread-1: Wed Jan 5 17:34:55 2022Thread-1: Wed Jan 5 17:34:56 2022Thread-2: Wed Jan 5 17:34:57 2022Thread-1: Wed Jan 5 17:34:57 2022Thread-1: Wed Jan 5 17:34:58 2022退出线程：Thread-1Thread-2: Wed Jan 5 17:34:59 2022Thread-2: Wed Jan 5 17:35:01 2022Thread-2: Wed Jan 5 17:35:03 2022退出线程：Thread-2退出主线程线程同步如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。 使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下： 多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。 考虑这样一种情况：一个列表里所有元素都是0，线程”set”从后向前把所有元素改成1，而线程”print”负责从前往后读取列表并打印。 那么，可能线程”set”开始改的时候，线程”print”便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。 锁有两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。 经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。 实例 123456789101112131415161718192021222324252627#!/usr/bin/python3import threadingimport timeclass myThread (threading.Thread): def __init__(self, threadID, name, delay): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.delay = delay def run(self): print (\"开启线程： \" + self.name) # 获取锁，用于线程同步 threadLock.acquire() print_time(self.name, self.delay, 3) # 释放锁，开启下一个线程 threadLock.release()def print_time(threadName, delay, counter): while counter: time.sleep(delay) print (\"%s: %s\" % (threadName, time.ctime(time.time()))) counter -= 1threadLock = threading.Lock()threads = [] 创建新线程12thread1 = myThread(1, \"Thread-1\", 1)thread2 = myThread(2, \"Thread-2\", 2) 开启新线程12thread1.start()thread2.start() 添加线程到线程列表12threads.append(thread1)threads.append(thread2) 等待所有线程完成12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576for t in threads: t.join()print (\"退出主线程\")执行以上程序，输出结果为：开启线程： Thread-1开启线程： Thread-2Thread-1: Wed Jan 5 17:36:50 2022Thread-1: Wed Jan 5 17:36:51 2022Thread-1: Wed Jan 5 17:36:52 2022Thread-2: Wed Jan 5 17:36:54 2022Thread-2: Wed Jan 5 17:36:56 2022Thread-2: Wed Jan 5 17:36:58 2022退出主线程线程优先级队列（ Queue）Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。Queue 模块中的常用方法:Queue.qsize() 返回队列的大小Queue.empty() 如果队列为空，返回True,反之FalseQueue.full() 如果队列满了，返回True,反之FalseQueue.full 与 maxsize 大小对应Queue.get([block[, timeout]])获取队列，timeout等待时间Queue.get_nowait() 相当Queue.get(False)Queue.put(item) 写入队列，timeout等待时间Queue.put_nowait(item) 相当Queue.put(item, False)Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号Queue.join() 实际上意味着等到队列为空，再执行别的操作实例#!/usr/bin/python3import queueimport threadingimport timeexitFlag = 0class myThread (threading.Thread): def __init__(self, threadID, name, q): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.q = q def run(self): print (\"开启线程：\" + self.name) process_data(self.name, self.q) print (\"退出线程：\" + self.name)def process_data(threadName, q): while not exitFlag: queueLock.acquire() if not workQueue.empty(): data = q.get() queueLock.release() print (\"%s processing %s\" % (threadName, data)) else: queueLock.release() time.sleep(1)threadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]nameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]queueLock = threading.Lock()workQueue = queue.Queue(10)threads = []threadID = 1# 创建新线程for tName in threadList: thread = myThread(threadID, tName, workQueue) thread.start() threads.append(thread) threadID += 1 填充队列1234queueLock.acquire()for word in nameList: workQueue.put(word)queueLock.release() 等待队列清空12while not workQueue.empty(): pass 通知线程是时候退出1exitFlag = 1 等待所有线程完成1234567891011121314151617for t in threads: t.join()print (\"退出主线程\")以上程序执行结果：开启线程：Thread-1开启线程：Thread-2开启线程：Thread-3Thread-3 processing OneThread-1 processing TwoThread-2 processing ThreeThread-3 processing FourThread-1 processing Five退出线程：Thread-3退出线程：Thread-2退出线程：Thread-1退出主线程","categories":[{"name":"学习","slug":"学习","permalink":"https://liujun994.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"https://liujun994.github.io/tags/python/"}],"author":"Jun Liu"},{"title":"Markdown_establish_table","slug":"Markdown-establish-table","date":"2022-06-27T14:35:37.000Z","updated":"2022-06-27T14:43:17.029Z","comments":true,"path":"2022/06/27/markdown-establish-table/","link":"","permalink":"https://liujun994.github.io/2022/06/27/markdown-establish-table/","excerpt":"","text":"1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 1这是一个链接 [菜鸟教程](https://www.runoob.com)","categories":[],"tags":[]},{"title":"诗词创作","slug":"诗词创作","date":"2022-06-27T00:33:38.000Z","updated":"2022-06-27T05:47:05.431Z","comments":true,"path":"2022/06/27/shi-ci-chuang-zuo/","link":"","permalink":"https://liujun994.github.io/2022/06/27/shi-ci-chuang-zuo/","excerpt":"","text":"","categories":[{"name":"诗词创作","slug":"诗词创作","permalink":"https://liujun994.github.io/categories/%E8%AF%97%E8%AF%8D%E5%88%9B%E4%BD%9C/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"https://liujun994.github.io/tags/%E8%AF%97%E8%AF%8D/"}],"author":"Jun Liu"},{"title":"兴趣与技能","slug":"兴趣与技能","date":"2022-06-27T00:32:50.000Z","updated":"2022-06-27T05:51:47.425Z","comments":true,"path":"2022/06/27/xing-qu-yu-ji-neng/","link":"","permalink":"https://liujun994.github.io/2022/06/27/xing-qu-yu-ji-neng/","excerpt":"","text":"","categories":[{"name":"兴趣与技能","slug":"兴趣与技能","permalink":"https://liujun994.github.io/categories/%E5%85%B4%E8%B6%A3%E4%B8%8E%E6%8A%80%E8%83%BD/"}],"tags":[{"name":"电脑维修","slug":"电脑维修","permalink":"https://liujun994.github.io/tags/%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"}],"author":"Jun Liu"},{"title":"paper","slug":"paper","date":"2022-06-26T14:52:23.000Z","updated":"2022-06-27T00:11:46.919Z","comments":true,"path":"2022/06/26/paper/","link":"","permalink":"https://liujun994.github.io/2022/06/26/paper/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"book","slug":"book","date":"2022-06-26T14:14:46.000Z","updated":"2022-06-26T23:19:04.339Z","comments":true,"path":"2022/06/26/book/","link":"","permalink":"https://liujun994.github.io/2022/06/26/book/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2022-06-26T12:10:08.000Z","updated":"2022-06-26T13:59:07.237Z","comments":true,"path":"2022/06/26/test/","link":"","permalink":"https://liujun994.github.io/2022/06/26/test/","excerpt":"","text":"","categories":[{"name":"Diary","slug":"Diary","permalink":"https://liujun994.github.io/categories/Diary/"},{"name":"PlayStation","slug":"Diary/PlayStation","permalink":"https://liujun994.github.io/categories/Diary/PlayStation/"},{"name":"Games","slug":"Diary/Games","permalink":"https://liujun994.github.io/categories/Diary/Games/"},{"name":"Life","slug":"Life","permalink":"https://liujun994.github.io/categories/Life/"}],"tags":[]},{"title":"postName","slug":"postName","date":"2022-06-26T08:55:23.000Z","updated":"2022-06-26T08:55:23.436Z","comments":true,"path":"2022/06/26/postname/","link":"","permalink":"https://liujun994.github.io/2022/06/26/postname/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello","slug":"test-figure","date":"2022-06-25T15:19:24.307Z","updated":"2022-06-25T15:32:41.962Z","comments":true,"path":"2022/06/25/test-figure/","link":"","permalink":"https://liujun994.github.io/2022/06/25/test-figure/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new “My New Post” More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment | col1 | col2 | col3 || —- | ————————————————————————— | —— || | | || | | |","categories":[{"name":"学习","slug":"学习","permalink":"https://liujun994.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://liujun994.github.io/tags/jQuery/"},{"name":"表格","slug":"表格","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"表单验证","slug":"表单验证","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"}]},{"title":"Hello World","slug":"hello-world - 副本","date":"2022-06-25T13:09:12.650Z","updated":"2022-06-25T13:18:34.253Z","comments":true,"path":"2022/06/25/hello-world-fu-ben/","link":"","permalink":"https://liujun994.github.io/2022/06/25/hello-world-fu-ben/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 呃呃呃飞飞","categories":[{"name":"科研","slug":"科研","permalink":"https://liujun994.github.io/categories/%E7%A7%91%E7%A0%94/"}],"tags":[]},{"title":"Hello","slug":"lizi2 (2)","date":"2022-06-25T12:11:38.662Z","updated":"2022-06-25T13:31:59.309Z","comments":true,"path":"2022/06/25/lizi2-2/","link":"","permalink":"https://liujun994.github.io/2022/06/25/lizi2-2/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"学习","slug":"学习","permalink":"https://liujun994.github.io/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://liujun994.github.io/tags/jQuery/"},{"name":"表格","slug":"表格","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"表单验证","slug":"表单验证","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-06-23T22:39:38.890Z","updated":"2022-06-25T11:35:59.483Z","comments":true,"path":"2022/06/24/hello-world/","link":"","permalink":"https://liujun994.github.io/2022/06/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 呃呃呃飞飞","categories":[],"tags":[]},{"title":"typora-vue-theme主题介绍","slug":"typora-vue-theme主题介绍","date":"2018-09-07T01:25:00.000Z","updated":"2022-06-26T12:43:52.322Z","comments":true,"path":"2018/09/07/typora-vue-theme-zhu-ti-jie-shao/","link":"","permalink":"https://liujun994.github.io/2018/09/07/typora-vue-theme-zhu-ti-jie-shao/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 呃呃呃飞飞","categories":[{"name":"Diary","slug":"Diary","permalink":"https://liujun994.github.io/categories/Diary/"},{"name":"PlayStation","slug":"Diary/PlayStation","permalink":"https://liujun994.github.io/categories/Diary/PlayStation/"},{"name":"Games","slug":"Diary/Games","permalink":"https://liujun994.github.io/categories/Diary/Games/"},{"name":"Life","slug":"Life","permalink":"https://liujun994.github.io/categories/Life/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://liujun994.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://liujun994.github.io/tags/Markdown/"}],"author":"Jun Liu"}],"categories":[{"name":"学习","slug":"学习","permalink":"https://liujun994.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"诗词创作","slug":"诗词创作","permalink":"https://liujun994.github.io/categories/%E8%AF%97%E8%AF%8D%E5%88%9B%E4%BD%9C/"},{"name":"兴趣与技能","slug":"兴趣与技能","permalink":"https://liujun994.github.io/categories/%E5%85%B4%E8%B6%A3%E4%B8%8E%E6%8A%80%E8%83%BD/"},{"name":"Diary","slug":"Diary","permalink":"https://liujun994.github.io/categories/Diary/"},{"name":"PlayStation","slug":"Diary/PlayStation","permalink":"https://liujun994.github.io/categories/Diary/PlayStation/"},{"name":"Games","slug":"Diary/Games","permalink":"https://liujun994.github.io/categories/Diary/Games/"},{"name":"Life","slug":"Life","permalink":"https://liujun994.github.io/categories/Life/"},{"name":"科研","slug":"科研","permalink":"https://liujun994.github.io/categories/%E7%A7%91%E7%A0%94/"}],"tags":[{"name":"python","slug":"python","permalink":"https://liujun994.github.io/tags/python/"},{"name":"诗词","slug":"诗词","permalink":"https://liujun994.github.io/tags/%E8%AF%97%E8%AF%8D/"},{"name":"电脑维修","slug":"电脑维修","permalink":"https://liujun994.github.io/tags/%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"},{"name":"jQuery","slug":"jQuery","permalink":"https://liujun994.github.io/tags/jQuery/"},{"name":"表格","slug":"表格","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"表单验证","slug":"表单验证","permalink":"https://liujun994.github.io/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"},{"name":"Typora","slug":"Typora","permalink":"https://liujun994.github.io/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"https://liujun994.github.io/tags/Markdown/"}]}